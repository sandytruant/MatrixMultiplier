$date
	Thu May 30 00:02:00 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module testbench_top $end
$var wire 64 ! res_data [63:0] $end
$var wire 4 " res_addr [3:0] $end
$var wire 1 # mem_write_enb $end
$var wire 1 $ mem_read_enb $end
$var wire 64 % mem_data [63:0] $end
$var wire 4 & mem_addr [3:0] $end
$var wire 1 ' done $end
$var wire 1 ( busyb $end
$var reg 1 ) clk $end
$var reg 1 * comp_enb $end
$var integer 32 + file1 [31:0] $end
$var integer 32 , i [31:0] $end
$scope module u_accelerator $end
$var wire 1 ) clk $end
$var wire 1 * comp_enb $end
$var wire 64 - mem_data [63:0] $end
$var parameter 32 . S_DONE $end
$var parameter 32 / S_READ $end
$var parameter 32 0 S_RST $end
$var parameter 32 1 S_WORK $end
$var reg 1 ( busyb $end
$var reg 2 2 counter [1:0] $end
$var reg 1 ' done $end
$var reg 4 3 mem_addr [3:0] $end
$var reg 1 $ mem_read_enb $end
$var reg 1 # mem_write_enb $end
$var reg 64 4 reg1 [63:0] $end
$var reg 64 5 reg2 [63:0] $end
$var reg 4 6 res_addr [3:0] $end
$var reg 64 7 res_data [63:0] $end
$var reg 2 8 state [1:0] $end
$upscope $end
$scope module u_input_mem $end
$var wire 4 9 address [3:0] $end
$var wire 1 ) clk $end
$var wire 1 : cs $end
$var wire 64 ; d [63:0] $end
$var wire 64 < q [63:0] $end
$var wire 1 = web $end
$var parameter 32 > ADDR_WIDTH $end
$var parameter 32 ? DATA_WIDTH $end
$var parameter 36 @ RAM_DEPTH $end
$var reg 64 A data_out [63:0] $end
$scope begin MEM_READ $end
$upscope $end
$scope begin MEM_WRITE $end
$upscope $end
$upscope $end
$scope module u_res_mem $end
$var wire 4 B address [3:0] $end
$var wire 1 ) clk $end
$var wire 1 C cs $end
$var wire 64 D d [63:0] $end
$var wire 64 E q [63:0] $end
$var wire 1 # web $end
$var parameter 32 F ADDR_WIDTH $end
$var parameter 32 G DATA_WIDTH $end
$var parameter 36 H RAM_DEPTH $end
$var reg 64 I data_out [63:0] $end
$scope begin MEM_READ $end
$upscope $end
$scope begin MEM_WRITE $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000 H
b1000000 G
b100 F
b10000 @
b1000000 ?
b100 >
b10 1
b0 0
b1 /
b11 .
$end
#0
$dumpvars
bx I
bx E
bx D
1C
bx B
bx A
x=
bx <
bz ;
1:
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx -
bx ,
bx +
1*
0)
x(
x'
bx &
bx %
x$
x#
bx "
bx !
$end
#1
0'
1(
1=
1#
0$
b0 2
b0 5
b0 4
b0 !
b0 7
b0 D
b0 "
b0 6
b0 B
b0 8
1)
#2
0)
0*
#3
b1 8
1)
#4
0)
#5
b1000100010001 %
b1000100010001 -
b1000100010001 <
b1000100010001 A
b1 2
b0 &
b0 3
b0 9
1)
#6
0)
#7
b10001000100010 %
b10001000100010 -
b10001000100010 <
b10001000100010 A
b10 2
b1 &
b1 3
b1 9
b1000100010001 4
1)
#8
0)
#9
0(
b10 8
b0 2
b10001000100010 5
1)
#10
0)
#11
b1 2
0#
b11001100110011 !
b11001100110011 7
b11001100110011 D
b10 "
b10 6
b10 B
1)
#12
0)
#13
1'
b11001100110011 E
b11001100110011 I
b11 8
b0 2
1#
1)
#14
0)
#15
1)
#16
0)
#17
1)
#18
0)
#19
1)
#20
0)
#21
1)
#22
0)
b10000 ,
b10000000000000000000000000000011 +
